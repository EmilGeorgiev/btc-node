// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package sync is a generated GoMock package.
package sync

import (
	reflect "reflect"

	p2p "github.com/EmilGeorgiev/btc-node/network/p2p"
	gomock "github.com/golang/mock/gomock"
)

// MockStartStop is a mock of StartStop interface.
type MockStartStop struct {
	ctrl     *gomock.Controller
	recorder *MockStartStopMockRecorder
}

// MockStartStopMockRecorder is the mock recorder for MockStartStop.
type MockStartStopMockRecorder struct {
	mock *MockStartStop
}

// NewMockStartStop creates a new mock instance.
func NewMockStartStop(ctrl *gomock.Controller) *MockStartStop {
	mock := &MockStartStop{ctrl: ctrl}
	mock.recorder = &MockStartStopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStartStop) EXPECT() *MockStartStopMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockStartStop) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockStartStopMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStartStop)(nil).Start))
}

// Stop mocks base method.
func (m *MockStartStop) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockStartStopMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStartStop)(nil).Stop))
}

// MockHeadersHandler is a mock of HeadersHandler interface.
type MockHeadersHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHeadersHandlerMockRecorder
}

// MockHeadersHandlerMockRecorder is the mock recorder for MockHeadersHandler.
type MockHeadersHandlerMockRecorder struct {
	mock *MockHeadersHandler
}

// NewMockHeadersHandler creates a new mock instance.
func NewMockHeadersHandler(ctrl *gomock.Controller) *MockHeadersHandler {
	mock := &MockHeadersHandler{ctrl: ctrl}
	mock.recorder = &MockHeadersHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeadersHandler) EXPECT() *MockHeadersHandlerMockRecorder {
	return m.recorder
}

// StartHandleMsgHeaders mocks base method.
func (m *MockHeadersHandler) StartHandleMsgHeaders() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartHandleMsgHeaders")
}

// StartHandleMsgHeaders indicates an expected call of StartHandleMsgHeaders.
func (mr *MockHeadersHandlerMockRecorder) StartHandleMsgHeaders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartHandleMsgHeaders", reflect.TypeOf((*MockHeadersHandler)(nil).StartHandleMsgHeaders))
}

// Stop mocks base method.
func (m *MockHeadersHandler) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockHeadersHandlerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockHeadersHandler)(nil).Stop))
}

// MockBlockHandler is a mock of BlockHandler interface.
type MockBlockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBlockHandlerMockRecorder
}

// MockBlockHandlerMockRecorder is the mock recorder for MockBlockHandler.
type MockBlockHandlerMockRecorder struct {
	mock *MockBlockHandler
}

// NewMockBlockHandler creates a new mock instance.
func NewMockBlockHandler(ctrl *gomock.Controller) *MockBlockHandler {
	mock := &MockBlockHandler{ctrl: ctrl}
	mock.recorder = &MockBlockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockHandler) EXPECT() *MockBlockHandlerMockRecorder {
	return m.recorder
}

// HandleBlockMessages mocks base method.
func (m *MockBlockHandler) HandleBlockMessages() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleBlockMessages")
}

// HandleBlockMessages indicates an expected call of HandleBlockMessages.
func (mr *MockBlockHandlerMockRecorder) HandleBlockMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBlockMessages", reflect.TypeOf((*MockBlockHandler)(nil).HandleBlockMessages))
}

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// GetPeerAddress mocks base method.
func (m *MockNode) GetPeerAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPeerAddress indicates an expected call of GetPeerAddress.
func (mr *MockNodeMockRecorder) GetPeerAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerAddress", reflect.TypeOf((*MockNode)(nil).GetPeerAddress))
}

// MockHeaderRequester is a mock of HeaderRequester interface.
type MockHeaderRequester struct {
	ctrl     *gomock.Controller
	recorder *MockHeaderRequesterMockRecorder
}

// MockHeaderRequesterMockRecorder is the mock recorder for MockHeaderRequester.
type MockHeaderRequesterMockRecorder struct {
	mock *MockHeaderRequester
}

// NewMockHeaderRequester creates a new mock instance.
func NewMockHeaderRequester(ctrl *gomock.Controller) *MockHeaderRequester {
	mock := &MockHeaderRequester{ctrl: ctrl}
	mock.recorder = &MockHeaderRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeaderRequester) EXPECT() *MockHeaderRequesterMockRecorder {
	return m.recorder
}

// RequestHeadersFromLastBlock mocks base method.
func (m *MockHeaderRequester) RequestHeadersFromLastBlock() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestHeadersFromLastBlock")
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestHeadersFromLastBlock indicates an expected call of RequestHeadersFromLastBlock.
func (mr *MockHeaderRequesterMockRecorder) RequestHeadersFromLastBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestHeadersFromLastBlock", reflect.TypeOf((*MockHeaderRequester)(nil).RequestHeadersFromLastBlock))
}

// MockBlockRepository is a mock of BlockRepository interface.
type MockBlockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBlockRepositoryMockRecorder
}

// MockBlockRepositoryMockRecorder is the mock recorder for MockBlockRepository.
type MockBlockRepositoryMockRecorder struct {
	mock *MockBlockRepository
}

// NewMockBlockRepository creates a new mock instance.
func NewMockBlockRepository(ctrl *gomock.Controller) *MockBlockRepository {
	mock := &MockBlockRepository{ctrl: ctrl}
	mock.recorder = &MockBlockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockRepository) EXPECT() *MockBlockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBlockRepository) Get(key [32]byte) (p2p.MsgBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(p2p.MsgBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBlockRepositoryMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBlockRepository)(nil).Get), key)
}

// GetLast mocks base method.
func (m *MockBlockRepository) GetLast() (p2p.MsgBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLast")
	ret0, _ := ret[0].(p2p.MsgBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLast indicates an expected call of GetLast.
func (mr *MockBlockRepositoryMockRecorder) GetLast() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLast", reflect.TypeOf((*MockBlockRepository)(nil).GetLast))
}

// Save mocks base method.
func (m *MockBlockRepository) Save(block p2p.MsgBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockBlockRepositoryMockRecorder) Save(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBlockRepository)(nil).Save), block)
}

// MockMsgSender is a mock of MsgSender interface.
type MockMsgSender struct {
	ctrl     *gomock.Controller
	recorder *MockMsgSenderMockRecorder
}

// MockMsgSenderMockRecorder is the mock recorder for MockMsgSender.
type MockMsgSenderMockRecorder struct {
	mock *MockMsgSender
}

// NewMockMsgSender creates a new mock instance.
func NewMockMsgSender(ctrl *gomock.Controller) *MockMsgSender {
	mock := &MockMsgSender{ctrl: ctrl}
	mock.recorder = &MockMsgSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsgSender) EXPECT() *MockMsgSenderMockRecorder {
	return m.recorder
}

// SendMsg mocks base method.
func (m *MockMsgSender) SendMsg(message p2p.Message, toPeer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", message, toPeer)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMsgSenderMockRecorder) SendMsg(message, toPeer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMsgSender)(nil).SendMsg), message, toPeer)
}

// MockBlockValidator is a mock of BlockValidator interface.
type MockBlockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockBlockValidatorMockRecorder
}

// MockBlockValidatorMockRecorder is the mock recorder for MockBlockValidator.
type MockBlockValidatorMockRecorder struct {
	mock *MockBlockValidator
}

// NewMockBlockValidator creates a new mock instance.
func NewMockBlockValidator(ctrl *gomock.Controller) *MockBlockValidator {
	mock := &MockBlockValidator{ctrl: ctrl}
	mock.recorder = &MockBlockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockValidator) EXPECT() *MockBlockValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockBlockValidator) Validate(arg0 p2p.MsgBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockBlockValidatorMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockBlockValidator)(nil).Validate), arg0)
}
