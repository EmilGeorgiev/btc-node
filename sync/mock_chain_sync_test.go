// Code generated by MockGen. DO NOT EDIT.
// Source: chain_sync.go

// Package sync is a generated GoMock package.
package sync

import (
	reflect "reflect"

	p2p "github.com/EmilGeorgiev/btc-node/network/p2p"
	gomock "github.com/golang/mock/gomock"
)

// MockBlockRepository is a mock of BlockRepository interface.
type MockBlockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBlockRepositoryMockRecorder
}

// MockBlockRepositoryMockRecorder is the mock recorder for MockBlockRepository.
type MockBlockRepositoryMockRecorder struct {
	mock *MockBlockRepository
}

// NewMockBlockRepository creates a new mock instance.
func NewMockBlockRepository(ctrl *gomock.Controller) *MockBlockRepository {
	mock := &MockBlockRepository{ctrl: ctrl}
	mock.recorder = &MockBlockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockRepository) EXPECT() *MockBlockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBlockRepository) Get(key [32]byte) (p2p.MsgBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(p2p.MsgBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBlockRepositoryMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBlockRepository)(nil).Get), key)
}

// GetLast mocks base method.
func (m *MockBlockRepository) GetLast() (p2p.MsgBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLast")
	ret0, _ := ret[0].(p2p.MsgBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLast indicates an expected call of GetLast.
func (mr *MockBlockRepositoryMockRecorder) GetLast() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLast", reflect.TypeOf((*MockBlockRepository)(nil).GetLast))
}

// Save mocks base method.
func (m *MockBlockRepository) Save(block p2p.MsgBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockBlockRepositoryMockRecorder) Save(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBlockRepository)(nil).Save), block)
}

// MockMsgSender is a mock of MsgSender interface.
type MockMsgSender struct {
	ctrl     *gomock.Controller
	recorder *MockMsgSenderMockRecorder
}

// MockMsgSenderMockRecorder is the mock recorder for MockMsgSender.
type MockMsgSenderMockRecorder struct {
	mock *MockMsgSender
}

// NewMockMsgSender creates a new mock instance.
func NewMockMsgSender(ctrl *gomock.Controller) *MockMsgSender {
	mock := &MockMsgSender{ctrl: ctrl}
	mock.recorder = &MockMsgSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsgSender) EXPECT() *MockMsgSenderMockRecorder {
	return m.recorder
}

// SendMsg mocks base method.
func (m *MockMsgSender) SendMsg(message p2p.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMsgSenderMockRecorder) SendMsg(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMsgSender)(nil).SendMsg), message)
}
