// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package node is a generated GoMock package.
package node

import (
	net "net"
	reflect "reflect"

	common "github.com/EmilGeorgiev/btc-node/common"
	p2p "github.com/EmilGeorgiev/btc-node/network/p2p"
	gomock "github.com/golang/mock/gomock"
)

// MockBlockRepository is a mock of BlockRepository interface.
type MockBlockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBlockRepositoryMockRecorder
}

// MockBlockRepositoryMockRecorder is the mock recorder for MockBlockRepository.
type MockBlockRepositoryMockRecorder struct {
	mock *MockBlockRepository
}

// NewMockBlockRepository creates a new mock instance.
func NewMockBlockRepository(ctrl *gomock.Controller) *MockBlockRepository {
	mock := &MockBlockRepository{ctrl: ctrl}
	mock.recorder = &MockBlockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockRepository) EXPECT() *MockBlockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBlockRepository) Get(key [32]byte) (p2p.MsgBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(p2p.MsgBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBlockRepositoryMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBlockRepository)(nil).Get), key)
}

// GetLast mocks base method.
func (m *MockBlockRepository) GetLast() (p2p.MsgBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLast")
	ret0, _ := ret[0].(p2p.MsgBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLast indicates an expected call of GetLast.
func (mr *MockBlockRepositoryMockRecorder) GetLast() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLast", reflect.TypeOf((*MockBlockRepository)(nil).GetLast))
}

// Save mocks base method.
func (m *MockBlockRepository) Save(block p2p.MsgBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockBlockRepositoryMockRecorder) Save(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBlockRepository)(nil).Save), block)
}

// MockHandshakeManager is a mock of HandshakeManager interface.
type MockHandshakeManager struct {
	ctrl     *gomock.Controller
	recorder *MockHandshakeManagerMockRecorder
}

// MockHandshakeManagerMockRecorder is the mock recorder for MockHandshakeManager.
type MockHandshakeManagerMockRecorder struct {
	mock *MockHandshakeManager
}

// NewMockHandshakeManager creates a new mock instance.
func NewMockHandshakeManager(ctrl *gomock.Controller) *MockHandshakeManager {
	mock := &MockHandshakeManager{ctrl: ctrl}
	mock.recorder = &MockHandshakeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandshakeManager) EXPECT() *MockHandshakeManagerMockRecorder {
	return m.recorder
}

// CreateIncomingHandshake mocks base method.
func (m *MockHandshakeManager) CreateIncomingHandshake(network, userAgent string) (p2p.Handshake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIncomingHandshake", network, userAgent)
	ret0, _ := ret[0].(p2p.Handshake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIncomingHandshake indicates an expected call of CreateIncomingHandshake.
func (mr *MockHandshakeManagerMockRecorder) CreateIncomingHandshake(network, userAgent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIncomingHandshake", reflect.TypeOf((*MockHandshakeManager)(nil).CreateIncomingHandshake), network, userAgent)
}

// CreateOutgoingHandshake mocks base method.
func (m *MockHandshakeManager) CreateOutgoingHandshake(addr common.Addr, network, userAgent string) (p2p.Handshake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOutgoingHandshake", addr, network, userAgent)
	ret0, _ := ret[0].(p2p.Handshake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOutgoingHandshake indicates an expected call of CreateOutgoingHandshake.
func (mr *MockHandshakeManagerMockRecorder) CreateOutgoingHandshake(addr, network, userAgent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutgoingHandshake", reflect.TypeOf((*MockHandshakeManager)(nil).CreateOutgoingHandshake), addr, network, userAgent)
}

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockValidator) Validate(block *p2p.MsgBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockValidatorMockRecorder) Validate(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidator)(nil).Validate), block)
}

// MockStartStop is a mock of StartStop interface.
type MockStartStop struct {
	ctrl     *gomock.Controller
	recorder *MockStartStopMockRecorder
}

// MockStartStopMockRecorder is the mock recorder for MockStartStop.
type MockStartStopMockRecorder struct {
	mock *MockStartStop
}

// NewMockStartStop creates a new mock instance.
func NewMockStartStop(ctrl *gomock.Controller) *MockStartStop {
	mock := &MockStartStop{ctrl: ctrl}
	mock.recorder = &MockStartStopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStartStop) EXPECT() *MockStartStopMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockStartStop) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockStartStopMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStartStop)(nil).Start))
}

// Stop mocks base method.
func (m *MockStartStop) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockStartStopMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStartStop)(nil).Stop))
}

// MockMsgHandlersManager is a mock of MsgHandlersManager interface.
type MockMsgHandlersManager struct {
	ctrl     *gomock.Controller
	recorder *MockMsgHandlersManagerMockRecorder
}

// MockMsgHandlersManagerMockRecorder is the mock recorder for MockMsgHandlersManager.
type MockMsgHandlersManagerMockRecorder struct {
	mock *MockMsgHandlersManager
}

// NewMockMsgHandlersManager creates a new mock instance.
func NewMockMsgHandlersManager(ctrl *gomock.Controller) *MockMsgHandlersManager {
	mock := &MockMsgHandlersManager{ctrl: ctrl}
	mock.recorder = &MockMsgHandlersManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsgHandlersManager) EXPECT() *MockMsgHandlersManagerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockMsgHandlersManager) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockMsgHandlersManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMsgHandlersManager)(nil).Start))
}

// StartOverviewHandlers mocks base method.
func (m *MockMsgHandlersManager) StartOverviewHandlers() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartOverviewHandlers")
}

// StartOverviewHandlers indicates an expected call of StartOverviewHandlers.
func (mr *MockMsgHandlersManagerMockRecorder) StartOverviewHandlers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOverviewHandlers", reflect.TypeOf((*MockMsgHandlersManager)(nil).StartOverviewHandlers))
}

// Stop mocks base method.
func (m *MockMsgHandlersManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockMsgHandlersManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMsgHandlersManager)(nil).Stop))
}

// MockSyncManager is a mock of SyncManager interface.
type MockSyncManager struct {
	ctrl     *gomock.Controller
	recorder *MockSyncManagerMockRecorder
}

// MockSyncManagerMockRecorder is the mock recorder for MockSyncManager.
type MockSyncManagerMockRecorder struct {
	mock *MockSyncManager
}

// NewMockSyncManager creates a new mock instance.
func NewMockSyncManager(ctrl *gomock.Controller) *MockSyncManager {
	mock := &MockSyncManager{ctrl: ctrl}
	mock.recorder = &MockSyncManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncManager) EXPECT() *MockSyncManagerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockSyncManager) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockSyncManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSyncManager)(nil).Start))
}

// StartChainOverview mocks base method.
func (m *MockSyncManager) StartChainOverview(peerAddr string, cho chan common.ChainOverview) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartChainOverview", peerAddr, cho)
}

// StartChainOverview indicates an expected call of StartChainOverview.
func (mr *MockSyncManagerMockRecorder) StartChainOverview(peerAddr, cho interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChainOverview", reflect.TypeOf((*MockSyncManager)(nil).StartChainOverview), peerAddr, cho)
}

// Stop mocks base method.
func (m *MockSyncManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockSyncManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSyncManager)(nil).Stop))
}

// MockPeerConnectionManager is a mock of PeerConnectionManager interface.
type MockPeerConnectionManager struct {
	ctrl     *gomock.Controller
	recorder *MockPeerConnectionManagerMockRecorder
}

// MockPeerConnectionManagerMockRecorder is the mock recorder for MockPeerConnectionManager.
type MockPeerConnectionManagerMockRecorder struct {
	mock *MockPeerConnectionManager
}

// NewMockPeerConnectionManager creates a new mock instance.
func NewMockPeerConnectionManager(ctrl *gomock.Controller) *MockPeerConnectionManager {
	mock := &MockPeerConnectionManager{ctrl: ctrl}
	mock.recorder = &MockPeerConnectionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerConnectionManager) EXPECT() *MockPeerConnectionManagerMockRecorder {
	return m.recorder
}

// GetChainOverview mocks base method.
func (m *MockPeerConnectionManager) GetChainOverview() (<-chan common.ChainOverview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainOverview")
	ret0, _ := ret[0].(<-chan common.ChainOverview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainOverview indicates an expected call of GetChainOverview.
func (mr *MockPeerConnectionManagerMockRecorder) GetChainOverview() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainOverview", reflect.TypeOf((*MockPeerConnectionManager)(nil).GetChainOverview))
}

// GetPeerAddr mocks base method.
func (m *MockPeerConnectionManager) GetPeerAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPeerAddr indicates an expected call of GetPeerAddr.
func (mr *MockPeerConnectionManagerMockRecorder) GetPeerAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerAddr", reflect.TypeOf((*MockPeerConnectionManager)(nil).GetPeerAddr))
}

// Start mocks base method.
func (m *MockPeerConnectionManager) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockPeerConnectionManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPeerConnectionManager)(nil).Start))
}

// Stop mocks base method.
func (m *MockPeerConnectionManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockPeerConnectionManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPeerConnectionManager)(nil).Stop))
}

// StopSync mocks base method.
func (m *MockPeerConnectionManager) StopSync() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopSync")
}

// StopSync indicates an expected call of StopSync.
func (mr *MockPeerConnectionManagerMockRecorder) StopSync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSync", reflect.TypeOf((*MockPeerConnectionManager)(nil).StopSync))
}

// Sync mocks base method.
func (m *MockPeerConnectionManager) Sync() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sync")
}

// Sync indicates an expected call of Sync.
func (mr *MockPeerConnectionManagerMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockPeerConnectionManager)(nil).Sync))
}

// MockNetworkMessageHandler is a mock of NetworkMessageHandler interface.
type MockNetworkMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMessageHandlerMockRecorder
}

// MockNetworkMessageHandlerMockRecorder is the mock recorder for MockNetworkMessageHandler.
type MockNetworkMessageHandlerMockRecorder struct {
	mock *MockNetworkMessageHandler
}

// NewMockNetworkMessageHandler creates a new mock instance.
func NewMockNetworkMessageHandler(ctrl *gomock.Controller) *MockNetworkMessageHandler {
	mock := &MockNetworkMessageHandler{ctrl: ctrl}
	mock.recorder = &MockNetworkMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkMessageHandler) EXPECT() *MockNetworkMessageHandlerMockRecorder {
	return m.recorder
}

// ReadMessage mocks base method.
func (m *MockNetworkMessageHandler) ReadMessage(conn net.Conn) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage", conn)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockNetworkMessageHandlerMockRecorder) ReadMessage(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockNetworkMessageHandler)(nil).ReadMessage), conn)
}

// WriteMessage mocks base method.
func (m *MockNetworkMessageHandler) WriteMessage(msg *p2p.Message, conn net.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", msg, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockNetworkMessageHandlerMockRecorder) WriteMessage(msg, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockNetworkMessageHandler)(nil).WriteMessage), msg, conn)
}
